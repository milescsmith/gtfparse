#!/usr/bin/env python3
import numpy as np
import pandas as pd
import vaex as vx
from tqdm import tqdm
from os import stat
from io import StringIO
from math import ceil

import pyperf
import time

filepath_or_buffer = "/Users/milessmith/Downloads/Homo_sapiens.GRCh38.101.gtf.gz"
chunksize = 1024 * 1024

def pandas_load():
    dataframes = []
    chunk_iterator = pd.read_csv(
        filepath_or_buffer,
        sep="\t",
        comment="#",
        names=[
            "seqname",
            "source",
            "feature",
            "start",
            "end",
            "score",
            "strand",
            "frame",
            "attribute",
        ],
        dtype={"score": np.float32, "attribue": str, "strand": "category"},
        skipinitialspace=True,
        skip_blank_lines=True,
        error_bad_lines=True,
        warn_bad_lines=True,
        chunksize=chunksize,
        engine="c",
        na_values=".",
        memory_map=True,
        low_memory=False,
    )
    
    if isinstance(filepath_or_buffer, str):
        file_size = stat(filepath_or_buffer).st_size
    elif isinstance(filepath_or_buffer, StringIO):
        file_size = len(filepath_or_buffer.getvalue())

    try:
        for df in tqdm(
            chunk_iterator,
            desc="loading file",
            total=ceil(file_size / (chunksize * 425)),
            unit="chunks",
            leave=True,
        ):
            dataframes.append(df)
    except Exception as e:
        raise ParsingError(str(e))

    df = pd.concat(dataframes)

def vaex_load():
    chunk_iterator = vx.from_csv(
        filepath_or_buffer,
        sep="\t",
        comment="#",
        names=[
            "seqname",
            "source",
            "feature",
            "start",
            "end",
            "score",
            "strand",
            "frame",
            "attribute",
        ],
        dtype={"score": np.float32, "attribue": str, "strand": "category"},
        skipinitialspace=True,
        skip_blank_lines=True,
        error_bad_lines=True,
        warn_bad_lines=True,
        na_values=".",
    )

runner = pyperf.Runner()
runner.bench_func('pd_load', pandas_load)
runner.bench_func('vx_load', vaex_load)